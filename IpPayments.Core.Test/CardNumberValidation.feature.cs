// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IpPayments.Core.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CardNumberValidation")]
    public partial class CardNumberValidationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CardNumberValidation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CardNumberValidation", "\tIn order to avoid processing bad card numbers \r\n\tI want to be valid card numbers" +
                    "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid Card Numbers")]
        [NUnit.Framework.TestCaseAttribute("4111111111111111", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5500000000000004", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411d111111111111", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111112", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411111111111111", "Invalid", new string[0])]
        public virtual void ValidCardNumbers(string cardNumber, string status, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Card Numbers", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("I have the following \'{0}\'", cardNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("I validated the Card Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("the result should be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid Cards including Expiry")]
        [NUnit.Framework.TestCaseAttribute("4111111111111111", "0", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5500000000000004", "0", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411d111111111111", "0", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111112", "0", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411111111111111", "0", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111111", "1", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5500000000000004", "1", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411d111111111111", "1", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111112", "1", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411111111111111", "1", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111111", "10", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5500000000000004", "10", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411d111111111111", "10", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111112", "10", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411111111111111", "10", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111111", "100", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5500000000000004", "100", "Valid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411d111111111111", "100", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111112", "100", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411111111111111", "100", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111111", "-1", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5500000000000004", "-1", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411d111111111111", "-1", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111112", "-1", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411111111111111", "-1", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111111", "-100", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5500000000000004", "-100", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411d111111111111", "-100", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4111111111111112", "-100", "Invalid", new string[0])]
        [NUnit.Framework.TestCaseAttribute("411111111111111", "-100", "Invalid", new string[0])]
        public virtual void ValidCardsIncludingExpiry(string cardNumber, string months, string status, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Cards including Expiry", exampleTags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given(string.Format("I have the following \'{0}\' with an expiry date \'{1}\' months from now", cardNumber, months), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("I validated the Card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then(string.Format("the result should be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
